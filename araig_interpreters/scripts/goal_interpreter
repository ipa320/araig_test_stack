#!/usr/bin/env python3.6
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
import rospy
from  command_interpreters.goal_interpreter_class import GoalInterpreterClass
import move_base_msgs.msg
from scipy.spatial.transform import Rotation

if __name__ == "__main__":
    rospy.init_node('goal_interpreter')
    module_name = "/interpreters"
    ns = module_name + rospy.get_name()
    config_goal = ns + "/goal"
    config_goal_action_name = ns + "/goal_action"
    config_time_wait_action = ns + "/wait_action"
    config_rate = ns + "/rate"

    pub_msg = {}
    goal = MoveBaseGoal() 
    goal.target_pose.header.frame_id = rospy.get_param(config_goal + '/frame_id')
    goal.target_pose.header.stamp = rospy.Time.now()
    goal.target_pose.pose.position.x = rospy.get_param(config_goal + '/position/x')
    goal.target_pose.pose.position.y = rospy.get_param(config_goal + '/position/y')
    goal.target_pose.pose.position.z = rospy.get_param(config_goal + '/position/z')

    yaw = rospy.get_param(config_goal + '/yaw')
    rot = Rotation.from_euler('xyz', [0, 0, yaw], degrees=False)
    q = rot.as_quat()

    goal.target_pose.pose.orientation.x = q[0]
    goal.target_pose.pose.orientation.y = q[1]
    goal.target_pose.pose.orientation.z = q[2]
    goal.target_pose.pose.orientation.w = q[3]

    goal_action_name = rospy.get_param(config_goal_action_name)

    if goal_action_name != "None":
        time_wait_action = rospy.get_param(config_time_wait_action)
    else:
        time_wait_action = 0 
    
    rate = rospy.get_param(config_rate)

    interpreter = GoalInterpreterClass(goal = goal, goal_action = goal_action_name,  wait_for_action= time_wait_action, loop_rate_hz = rate)
