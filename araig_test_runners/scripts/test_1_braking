#!/usr/bin/env python
import rospy
from base.base_runner import TestBase
import enum
import sys

""""
BASE INTERFACES
# sub
self._input_interface = {
    "robot_has_stopped"    : "/signal/calc/robot_has_stopped",
    "start_test"           : "/signal/ui/start_test",
    "interrupt_test"       : "/signal/ui/interrupt_test",
    "reset_test"           : "/signal/ui/reset_test"
}
# pub
self._output_interface = {
    "start_robot"          : "/signal/runner/start_robot",
    "stop_robot"            : "/signal/runner/stop_robot",
    "test_completed"       : "/signal/runner/test_completed",
    "test_failed"          : "/signal/runner/test_failed",
    "test_succeeded"       : "/signal/runner/test_succeeded",
    "start_test"           : "/signal/ui/start_test",
    "reset_test"           : "/signal/ui/reset_test",
    "interrupt_test"       : "/signal/ui/interrupt_test",
}
"""

class Test1(TestBase):
    def __init__(self, rate):
        
        extend_subscribers_dict = {
            "robot_has_max_vel"  : "/signal/calc/robot_has_max_vel",
        }
        extend_publishers_dict = {
        }
        extend_param_list = {
            "stabilization_timeout",
            "acceleration_timeout",
            "verification_timeout",
            "decceleration_timeout"
        }

        super(Test1, self).__init__(sub_dict = extend_subscribers_dict, \
        pub_dict = extend_publishers_dict, \
        param_list = extend_param_list, \
        rate = rate)

    def main(self):
        # Standard startup, robot started on return
        self.standardStartupSequence()

        # Sleep for some time to allow speed burst to settle
        if self.sleepUninterruptedFor(self.config_param['stabilization_timeout']) == self._RETURN_CASE_INTERRUPTED:
            return

        # Wait for robot to reach max_vel
        rospy.logwarn(rospy.get_name() + ": Waiting {}s for robot to reach max vel"
                        .format(self.config_param['acceleration_timeout']))
        result = self.timedLoopFallbackOnFlags(["robot_has_max_vel"], self.config_param['acceleration_timeout']) 
        if result == self._RETURN_CASE_INTERRUPTED:
            return
        elif result == self._RETURN_CASE_TIMED_OUT:
            rospy.logwarn(rospy.get_name() + ": Robot did not reach max vel in expected time, ending test in failure!!")
            self.testFailed()
            # TODO: Emulating UI responsibility Remove this once UI is integrated.
            self._publishers["start_test"].publish(self.buildNewBoolStamped(False))
            self.waitForReset()
            return

        # Wait for some time to check again if robot still has max vel
        rospy.logwarn(rospy.get_name() + ": Robot has reached max veloctiy, waiting {}s to check again"
                        .format(self.config_param['verification_timeout']))
        if self.sleepUninterruptedFor(self.config_param['verification_timeout']) == self._RETURN_CASE_INTERRUPTED:
            return

        # Check again if robot still has max_vel.
        if self.getSafeFlag("robot_has_max_vel"):
            rospy.logwarn(rospy.get_name() + ": Robot maintained max vel, so now stopping it")
            # Stop robot
            self.stopRobot()
            # Wait until robot actually stops
            result = self.timedLoopFallbackOnFlags(["robot_has_stopped"], self.config_param['decceleration_timeout'])
            if result == self._RETURN_CASE_INTERRUPTED:
                return
            elif result == self._RETURN_CASE_TIMED_OUT:
                rospy.logerr(rospy.get_name() + ": Robot did not stop in expected {}s, ending test in failure!!"
                        .format(self.config_param['decceleration_timeout']))
                self.testFailed()
            else:
                rospy.logwarn(rospy.get_name() + ": Robot has completely stopped. Test succeeded!")
                self.testSucceeded()
        else :
            # Not maintaining max_vel is considered a failure condition. This can be removed if not desired.
            rospy.logwarn(rospy.get_name() + ": Robot did not maintain max_vel. Teset failed!")
            self.testFailed()

        # TODO: Emulating UI responsibility Remove this once UI is integrated.
        self._publishers["start_test"].publish(self.buildNewBoolStamped(False))
        # Once teset completed, wait for reset
        self.waitForReset()
        return

if __name__ == "__main__":
    try:
        rospy.init_node("test1_runner", disable_signals=True)
        test = Test1(100)
    except rospy.ROSException:
        pass