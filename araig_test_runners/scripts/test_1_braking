#!/usr/bin/env python
import rospy
from base.base_runner import TestBase

""""
BASE INTERFACES
# sub
self._input_interface = {
    "robot_has_stopped"    : "/signal/calc/robot_has_stopped",
    "start_test"           : "/signal/ui/start_test",
    "interrupt_test"       : "/signal/ui/interrupt_test",
    "reset_test"           : "/signal/ui/reset_test"
}
# pub
self._output_interface = {
    "start_robot"          : "/signal/runner/start_robot",
    "test_completed"       : "/signal/runner/test_completed",
    "test_failed"          : "/signal/runner/test_failed",
    "test_succeeded"       : "/signal/runner/test_succeeded",
    "start_test"           : "/signal/ui/start_test",
    "reset_test"           : "/signal/ui/reset_test"
}
"""

class Test1(TestBase):
    def __init__(self, rate):
        
        extend_subscribers_dict = {
            "robot_has_max_vel"  : "/signal/calc/robot_has_max_vel",
        }
        extend_publishers_dict = {
            "stop_robot"           : "/signal/runner/stop_robot",
        }

        super(Test1, self).__init__(extend_subscribers_dict, extend_publishers_dict, rate = rate)
        
        while not rospy.is_shutdown():
            self.main()

    def main(self):
        rospy.loginfo(rospy.get_name() + ": Waiting to start...")

        # Wait until start signal received
        while not rospy.is_shutdown():
            self._rate.sleep()
            if self.getSafeFlag("start_test"):
                self.startRecordingAndWait(3)
                rospy.loginfo(rospy.get_name() + ": Starting robot.")
                self._publishers["start_robot"].publish(self.buildNewBoolStamped(True))
                break
                
        # wait until robot reaches max velocity
        while not rospy.is_shutdown():
            self._rate.sleep()

            # If robot has reached max velocity
            if self.getSafeFlag("robot_has_max_vel"):
                rospy.loginfo(rospy.get_name() + ": Robot has reached max veloctiy, stopping it now.")
                # Stop robot
                self._publishers["start_robot"].publish(self.buildNewBoolStamped(False))
                self._publishers["stop_robot"].publish(self.buildNewBoolStamped(True))
                break

            # If interrupted
            if self.getSafeFlag("interrupt_test"):
                rospy.logwarn(rospy.get_name() + ": Interrupted!! Exiting")
                self._publishers["start_robot"].publish(self.buildNewBoolStamped(False))
                self._publishers["test_failed"].publish(self.buildNewBoolStamped(True))
                self._publishers["test_completed"].publish(self.buildNewBoolStamped(True))
                return

        # Wait until robot actually stops or user hits interrupt
        while not rospy.is_shutdown():
            self._rate.sleep()

            if self.getSafeFlag("robot_has_stopped"):
                rospy.loginfo(rospy.get_name() + ": Robot has completely stopped. Test succeeded and completed!")
                # Set test succeeded & test completed true
                self._publishers["test_succeeded"].publish(self.buildNewBoolStamped(True))
                self._publishers["test_completed"].publish(self.buildNewBoolStamped(True))
                # !!! ui should publish once get test_completed, but for now runner will pub
                self._publishers["start_test"].publish(self.buildNewBoolStamped(False))
                break

            # If interrupted
            if self.getSafeFlag("interrupt_test"):
                rospy.logwarn(rospy.get_name() + ": Interrupted!! Exiting")
                self._publishers["start_robot"].publish(self.buildNewBoolStamped(False))
                self._publishers["test_failed"].publish(self.buildNewBoolStamped(True))
                self._publishers["test_completed"].publish(self.buildNewBoolStamped(True))
                # !!! ui should publish once get test_completed, but for now runner will pub
                self._publishers["start_test"].publish(self.buildNewBoolStamped(False))
                return
        
        while not rospy.is_shutdown():
            self._rate.sleep()    
            if self.getSafeFlag("reset_test"):
                rospy.logwarn(rospy.get_name() + ": reset test")
                self._publishers["start_robot"].publish(self.buildNewBoolStamped(False))
                self._publishers["stop_robot"].publish(self.buildNewBoolStamped(False))
                self._publishers["test_failed"].publish(self.buildNewBoolStamped(False))
                self._publishers["test_succeeded"].publish(self.buildNewBoolStamped(False))
                self._publishers["test_completed"].publish(self.buildNewBoolStamped(False))
                 # !!! ui should publish reset_test to False after pub True, reset signal is event
                self._publishers["reset_test"].publish(self.buildNewBoolStamped(False))
                return

if __name__ == "__main__":
    try:
        rospy.init_node("test1_runner", disable_signals=True)
        test = Test1(100)
    except rospy.ROSException:
        pass