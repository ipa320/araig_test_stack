#!/usr/bin/env python
import rospy
from base.base_runner import TestBase
import enum

""""
BASE INTERFACES
# sub
self._input_interface = {
    "robot_has_stopped"    : "/signal/calc/robot_has_stopped",
    "start_test"           : "/signal/ui/start_test",
    "interrupt_test"       : "/signal/ui/interrupt_test",
    "reset_test"           : "/signal/ui/reset_test"
}
# pub
self._output_interface = {
    "start_robot"          : "/signal/runner/start_robot",
    "stop_robot"            : "/signal/runner/stop_robot",
    "test_completed"       : "/signal/runner/test_completed",
    "test_failed"          : "/signal/runner/test_failed",
    "test_succeeded"       : "/signal/runner/test_succeeded",
    "start_test"           : "/signal/ui/start_test",
    "reset_test"           : "/signal/ui/reset_test",
    "interrupt_test"       : "/signal/ui/interrupt_test",
}
"""
# robot should stop if meets obstacles
class Test5NoNav(TestBase):
    def __init__(self, rate):
        
        extend_subscribers_dict = {
            "robot_in_collision"    : "/signal/calc/robot_in_collision"
        }
        extend_publishers_dict = {

        }
        extend_param_list = {
            "goal_reach_timeout",
            "verification_timeout",
        }

        super(Test5NoNav, self).__init__(sub_dict = extend_subscribers_dict, \
        pub_dict = extend_publishers_dict, \
        param_list = extend_param_list, \
        rate = rate)

    def main(self):
        # Standard startup, robot started on return
        self.standardStartupSequence()

        # Sleep a short duration to allow robot to start moving, in order not to get premature robot stopped signal
        rospy.loginfo(rospy.get_name() + ": Sleeping {}s for robo to start moving"
                                .format(self.config_param['verification_timeout']))
        if self.sleepUninterruptedFor(self.config_param['verification_timeout']) == self._RETURN_CASE_INTERRUPTED:
            return

        # Once robot starts moving, there are 4 completion conditions:
        # 1. Fail if robot collides with obstacle
        # 2. Fail if interrupted by user
        # 3. Succeed if robot stops (assumed that this is because it detected an obstacle)
        # 4. Completed if test duration ends (but maybe it never found an obstacle?)
        
        result = self.timedLoopFallbackOnFlags(["robot_in_collision" ,"robot_has_stopped"],
                                                self.config_param['goal_reach_timeout'])
        if result == self._RETURN_CASE_INTERRUPTED:
            return
        elif result == self._RETURN_CASE_TIMED_OUT:
            rospy.logwarn(rospy.get_name() + ": Test timed out, ending in default completion. Was there an obtacle?")
            self.testCompleted()
        elif result == 0:
            rospy.logwarn(rospy.get_name() + ": Robot collided! Ending test in failure.")
            self.testFailed()
        elif result == 1:
            rospy.logwarn(rospy.get_name() + ": Robot Stopped in front of obstacle! Ending test in success.")
            self.testSucceeded()

        # TODO: Emulating UI responsibility Remove this once UI is integrated.
        self._publishers["start_test"].publish(self.buildNewBoolStamped(False))
        self.waitForReset()
        return

if __name__ == "__main__":
    try:
        rospy.init_node("Test5_without_nav_runner", disable_signals=True)
        test = Test5NoNav(100)
    except rospy.ROSException:
        pass